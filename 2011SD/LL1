Lenguaje:
Las expresiones lógicas (predicados) que incluyen a los átomos 't' (true) y 'f' (false), el operador de conjunción '∧', el operador de negación '¬' y la asociación con paréntesis ('(' y ')'), todo con las reglas normales de sintaxis de los predicados lógicos.  La palabra vacía se considera un predicado válido (esto es parte de la definición; NO es algo que se deduce).



Gramática intuitiva inicial:
Sʹ → λ | B
B  → B ∧ B | ¬ B | t | f | ( B )
Esta gramática es ambigua.  Como estamos tratando con un lenguaje de expresiones algebráicas con operadores que tienen asociadas precedencias y demás, podemos aplicar la técnica usual para desambiguar estos casos.



El resultado de este proceso:
Sʹ → B | λ
B  → B ∧ C | C
C  → ¬ C | F
F  → t | f | ( B )
Esta gramática tiene recursión izquierda en el símbolo B, así que no puede ser fuertemente LL(1).



Se realiza el proceso de eliminación de recursión izquierda:
Sʹ → B | λ
B  → C X | C
X  → ∧ C X | ∧ C
C  → ¬ C | F
F  → t | f | ( B )
Esta gramática tiene símbolos no terminales tales que existen dos producciones distintas con ese no terminal a la izquierda, y que sus lados derechos tienen algún prefijo común no vacío.



Aplicamos factorización izquierda:
Sʹ → B | λ
B  → C Xʹ
C  → ¬ C | F
F  → t | f | ( B )
X  → ∧ C Xʹ
Xʹ → X | λ



Además, expandimos la gramática con el nuevo símbolo inicial que va al anterior con el sentinela:
Sʺ → Sʹ $
Sʹ → B | λ
B  → C Xʹ
C  → ¬ C | F
F  → t | f | ( B )
X  → ∧ C Xʹ
Xʹ → X | λ

Pareciera que ahora podemos intentar calcular los First y Follow.  Primero, extrayendo toda la información de la gramática, obtenemos las relaciones que nos permitirán calcularlos:
   ┏━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
   ┃First                    ┃Follow                                    ┃
┏━━╋━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃Sʺ┃¬ t f ( ) $              │          $                               ┃
┣━━╉─────────────────────────┼──────────────────────────────────────────┨
┃Sʹ┃¬ t f ( ) $              │          $                               ┃
┣━━╉─────────────────────────┼──────────────────────────────────────────┨
┃B ┃¬ t f ( )                │        ) $                               ┃
┣━━╉─────────────────────────┼──────────────────────────────────────────┨
┃C ┃¬ t f ( )                │            First(Xʹ) Follow(B) Follow(X) ┃
┣━━╉─────────────────────────┼──────────────────────────────────────────┨
┃F ┃  t f ( )                │¬ t f ( ) $ Follow(C)                     ┃
┣━━╉─────────────────────────┼──────────────────────────────────────────┨
┃Xʹ┃        )   ∧ Follow(Xʹ) │¬ t f ( ) $ Follow(B) Follow(X)           ┃
┣━━╉─────────────────────────┼──────────────────────────────────────────┨
┃X ┃        )   ∧            │¬ t f ( ) $ Follow(Xʹ)                    ┃
┗━━┻━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛



A partir de esta tabla podemos calcular los First y Follow definitivos usando un simple método de punto fijo:
   ┏━━━━━━━━━━━━━┳━━━━━━━━━━━━━┓
   ┃First        ┃Follow       ┃
┏━━╋━━━━━━━━━━━━━╇━━━━━━━━━━━━━┫
┃Sʺ┃¬ t f (   $  │          $  ┃
┣━━╉─────────────┼─────────────┨
┃Sʹ┃¬ t f (   $  │          $  ┃
┣━━╉─────────────┼─────────────┨
┃B ┃¬ t f (      │        ) $  ┃
┣━━╉─────────────┼─────────────┨
┃C ┃¬ t f (      │        ) $ ∧┃
┣━━╉─────────────┼─────────────┨
┃F ┃  t f (      │        ) $ ∧┃
┣━━╉─────────────┼─────────────┨
┃Xʹ┃        ) $ ∧│        ) $  ┃
┣━━╉─────────────┼─────────────┨
┃X ┃            ∧│        ) $  ┃
┗━━┻━━━━━━━━━━━━━┷━━━━━━━━━━━━━┛



Ahora, para construir la tabla, enumeramos las reglas de la gramática:
( 1) Sʺ → Sʹ $
( 2) Sʹ → B
( 3) Sʹ → λ
( 4) B  → C Xʹ
( 5) C  → ¬ C
( 6) C  → F
( 7) F  → t
( 8) F  → f
( 9) F  → ( B )
(10) Xʹ → X
(11) Xʹ → λ
(12) X  → ∧ C Xʹ



Calculando los conjuntos Lookahead de cada regla con la fórmula
        First₁(A → ω) = First₁(First(ω)·Follow(A))
construimos la tabla para el parser LL(1):
   ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┓
   ┃ ¬┃ t┃ f┃ (┃ )┃ $┃ ∧┃
┏━━╋━━╇━━╇━━╇━━╇━━╇━━╇━━┫
┃Sʺ┃ 1│ 1│ 1│ 1│  │ 1│  ┃
┣━━╉──┼──┼──┼──┼──┼──┼──┨
┃Sʹ┃ 2│ 2│ 2│ 2│  │ 3│  ┃
┣━━╉──┼──┼──┼──┼──┼──┼──┨
┃B ┃ 4│ 4│ 4│ 4│  │  │  ┃
┣━━╉──┼──┼──┼──┼──┼──┼──┨
┃C ┃ 5│ 6│ 6│ 6│  │  │  ┃
┣━━╉──┼──┼──┼──┼──┼──┼──┨
┃F ┃  │ 7│ 8│ 9│  │  │  ┃
┣━━╉──┼──┼──┼──┼──┼──┼──┨
┃Xʹ┃  │  │  │  │11│11│10┃
┣━━╉──┼──┼──┼──┼──┼──┼──┨
┃X ┃  │  │  │  │  │  │12┃
┗━━┻━━┷━━┷━━┷━━┷━━┷━━┷━━┛



Un ejemplo de palabra del lenguaje es
        t∧(¬f∧f)∧t
y se puede derivar así:
┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┓
┃    Entrada┃Pila            ┃Forma sentencial                     ┃Acción               ┃
┣━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━┫
┃t∧(¬f∧f)∧t$│Sʺ              │Sʺ                                   │Regla  1: Sʺ → Sʹ $  ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃t∧(¬f∧f)∧t$│$ Sʹ            │Sʹ $                                 │Regla  2: Sʹ → B     ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃t∧(¬f∧f)∧t$│$ B             │B $                                  │Regla  4: B  → C Xʹ  ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃t∧(¬f∧f)∧t$│$ Xʹ C          │C Xʹ $                               │Regla  6: C  → F     ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃t∧(¬f∧f)∧t$│$ Xʹ F          │F Xʹ $                               │Regla  7: F  → t     ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃t∧(¬f∧f)∧t$│$ Xʹ t          │t Xʹ $                               │Consumir 't'         ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃ ∧(¬f∧f)∧t$│$ Xʹ            │t Xʹ $                               │Regla 10: Xʹ → X     ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃ ∧(¬f∧f)∧t$│$ X             │t X                                  │Regla 12: X  → ∧ C Xʹ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃ ∧(¬f∧f)∧t$│$ Xʹ C ∧        │t ∧ C Xʹ $                           │Consumir '∧'         ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃  (¬f∧f)∧t$│$ Xʹ C          │t ∧ C Xʹ $                           │Regla 6: C  → F      ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃  (¬f∧f)∧t$│$ Xʹ F          │t ∧ F Xʹ $                           │Regla 9: F  → ( B )  ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃  (¬f∧f)∧t$│$ ) B (         │t ∧ ( B ) Xʹ $                       │Consumir '('         ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃   ¬f∧f)∧t$│$ ) B           │t ∧ ( B ) Xʹ $                       │Regla 4: B  → C Xʹ   ┃
┠───────────┼────────────────┼─────────────────────────────────────┼─────────────────────┨
┃   ¬f∧f)∧t$│$ ) Xʹ C        │t ∧ ( C Xʹ ) Xʹ $                    │  ...etc etc etc...  ┃
┗━━━━━━━━━━━┷━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━┛
